// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events/events.proto

#include "events/events.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mavsdk {
namespace rpc {
namespace events {
      template <typename>
PROTOBUF_CONSTEXPR SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(::_pbi::ConstantInitialized) {}
struct SubscribeHealthAndArmingChecksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeHealthAndArmingChecksRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeHealthAndArmingChecksRequestDefaultTypeInternal() {}
  union {
    SubscribeHealthAndArmingChecksRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeHealthAndArmingChecksRequestDefaultTypeInternal _SubscribeHealthAndArmingChecksRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeEventsRequest::SubscribeEventsRequest(::_pbi::ConstantInitialized) {}
struct SubscribeEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeEventsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeEventsRequestDefaultTypeInternal() {}
  union {
    SubscribeEventsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeEventsRequestDefaultTypeInternal _SubscribeEventsRequest_default_instance_;

inline constexpr HealthComponentReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_present_{false},
        has_error_{false},
        has_warning_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthComponentReport::HealthComponentReport(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthComponentReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthComponentReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthComponentReportDefaultTypeInternal() {}
  union {
    HealthComponentReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthComponentReportDefaultTypeInternal _HealthComponentReport_default_instance_;

inline constexpr HealthAndArmingCheckProblem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        health_component_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        log_level_{static_cast< ::mavsdk::rpc::events::LogLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthAndArmingCheckProblemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckProblemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckProblemDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckProblem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckProblemDefaultTypeInternal _HealthAndArmingCheckProblem_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(::_pbi::ConstantInitialized) {}
struct GetHealthAndArmingChecksReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHealthAndArmingChecksReportRequestDefaultTypeInternal() {}
  union {
    GetHealthAndArmingChecksReportRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHealthAndArmingChecksReportRequestDefaultTypeInternal _GetHealthAndArmingChecksReportRequest_default_instance_;

inline constexpr EventsResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::mavsdk::rpc::events::EventsResult_Result >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EventsResult::EventsResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventsResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventsResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventsResultDefaultTypeInternal() {}
  union {
    EventsResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventsResultDefaultTypeInternal _EventsResult_default_instance_;

inline constexpr Event::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        event_namespace_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        event_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        compid_{0u},
        log_level_{static_cast< ::mavsdk::rpc::events::LogLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;

inline constexpr HealthAndArmingCheckMode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : problems_{},
        mode_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        can_arm_or_run_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAndArmingCheckMode::HealthAndArmingCheckMode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthAndArmingCheckModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckModeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckModeDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckMode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckModeDefaultTypeInternal _HealthAndArmingCheckMode_default_instance_;

inline constexpr EventsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        event_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EventsResponse::EventsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventsResponseDefaultTypeInternal() {}
  union {
    EventsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventsResponseDefaultTypeInternal _EventsResponse_default_instance_;

inline constexpr HealthAndArmingCheckReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        health_components_{},
        all_problems_{},
        current_mode_intention_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAndArmingCheckReport::HealthAndArmingCheckReport(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthAndArmingCheckReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckReportDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckReportDefaultTypeInternal _HealthAndArmingCheckReport_default_instance_;

inline constexpr HealthAndArmingChecksResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        report_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthAndArmingChecksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingChecksResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingChecksResponseDefaultTypeInternal() {}
  union {
    HealthAndArmingChecksResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingChecksResponseDefaultTypeInternal _HealthAndArmingChecksResponse_default_instance_;

inline constexpr GetHealthAndArmingChecksReportResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        events_result_{nullptr},
        report_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetHealthAndArmingChecksReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHealthAndArmingChecksReportResponseDefaultTypeInternal() {}
  union {
    GetHealthAndArmingChecksReportResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHealthAndArmingChecksReportResponseDefaultTypeInternal _GetHealthAndArmingChecksReportResponse_default_instance_;
}  // namespace events
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_events_2fevents_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_events_2fevents_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_events_2fevents_2eproto = nullptr;
const ::uint32_t TableStruct_events_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.compid_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.log_level_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.event_namespace_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.event_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.log_level_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.health_component_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.mode_name_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.can_arm_or_run_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.problems_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.is_present_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.has_error_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.has_warning_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.current_mode_intention_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.health_components_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.all_problems_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _impl_.result_str_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::SubscribeEventsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResponse, _impl_.event_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingChecksResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingChecksResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingChecksResponse, _impl_.report_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _impl_.events_result_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _impl_.report_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mavsdk::rpc::events::Event)},
        {14, -1, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckProblem)},
        {26, -1, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckMode)},
        {37, -1, -1, sizeof(::mavsdk::rpc::events::HealthComponentReport)},
        {50, 61, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckReport)},
        {64, -1, -1, sizeof(::mavsdk::rpc::events::EventsResult)},
        {74, -1, -1, sizeof(::mavsdk::rpc::events::SubscribeEventsRequest)},
        {82, 91, -1, sizeof(::mavsdk::rpc::events::EventsResponse)},
        {92, -1, -1, sizeof(::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest)},
        {100, 109, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingChecksResponse)},
        {110, -1, -1, sizeof(::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest)},
        {118, 128, -1, sizeof(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::events::_Event_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthAndArmingCheckProblem_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthAndArmingCheckMode_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthComponentReport_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthAndArmingCheckReport_default_instance_._instance,
    &::mavsdk::rpc::events::_EventsResult_default_instance_._instance,
    &::mavsdk::rpc::events::_SubscribeEventsRequest_default_instance_._instance,
    &::mavsdk::rpc::events::_EventsResponse_default_instance_._instance,
    &::mavsdk::rpc::events::_SubscribeHealthAndArmingChecksRequest_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthAndArmingChecksResponse_default_instance_._instance,
    &::mavsdk::rpc::events::_GetHealthAndArmingChecksReportRequest_default_instance_._instance,
    &::mavsdk::rpc::events::_GetHealthAndArmingChecksReportResponse_default_instance_._instance,
};
const char descriptor_table_protodef_events_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023events/events.proto\022\021mavsdk.rpc.events"
    "\032\024mavsdk_options.proto\"\232\001\n\005Event\022\016\n\006comp"
    "id\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\023\n\013description"
    "\030\003 \001(\t\022.\n\tlog_level\030\004 \001(\0162\033.mavsdk.rpc.e"
    "vents.LogLevel\022\027\n\017event_namespace\030\005 \001(\t\022"
    "\022\n\nevent_name\030\006 \001(\t\"\215\001\n\033HealthAndArmingC"
    "heckProblem\022\017\n\007message\030\001 \001(\t\022\023\n\013descript"
    "ion\030\002 \001(\t\022.\n\tlog_level\030\003 \001(\0162\033.mavsdk.rp"
    "c.events.LogLevel\022\030\n\020health_component\030\004 "
    "\001(\t\"\207\001\n\030HealthAndArmingCheckMode\022\021\n\tmode"
    "_name\030\001 \001(\t\022\026\n\016can_arm_or_run\030\002 \001(\010\022@\n\010p"
    "roblems\030\003 \003(\0132..mavsdk.rpc.events.Health"
    "AndArmingCheckProblem\"p\n\025HealthComponent"
    "Report\022\014\n\004name\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\022\n\ni"
    "s_present\030\003 \001(\010\022\021\n\thas_error\030\004 \001(\010\022\023\n\013ha"
    "s_warning\030\005 \001(\010\"\364\001\n\032HealthAndArmingCheck"
    "Report\022K\n\026current_mode_intention\030\001 \001(\0132+"
    ".mavsdk.rpc.events.HealthAndArmingCheckM"
    "ode\022C\n\021health_components\030\002 \003(\0132(.mavsdk."
    "rpc.events.HealthComponentReport\022D\n\014all_"
    "problems\030\003 \003(\0132..mavsdk.rpc.events.Healt"
    "hAndArmingCheckProblem\"\230\002\n\014EventsResult\022"
    "6\n\006result\030\001 \001(\0162&.mavsdk.rpc.events.Even"
    "tsResult.Result\022\022\n\nresult_str\030\002 \001(\t\"\273\001\n\006"
    "Result\022\022\n\016RESULT_SUCCESS\020\000\022\030\n\024RESULT_NOT"
    "_AVAILABLE\020\001\022\033\n\027RESULT_CONNECTION_ERROR\020"
    "\002\022\026\n\022RESULT_UNSUPPORTED\020\003\022\021\n\rRESULT_DENI"
    "ED\020\004\022\021\n\rRESULT_FAILED\020\005\022\022\n\016RESULT_TIMEOU"
    "T\020\006\022\024\n\020RESULT_NO_SYSTEM\020\007\"\030\n\026SubscribeEv"
    "entsRequest\"9\n\016EventsResponse\022\'\n\005event\030\001"
    " \001(\0132\030.mavsdk.rpc.events.Event\"\'\n%Subscr"
    "ibeHealthAndArmingChecksRequest\"^\n\035Healt"
    "hAndArmingChecksResponse\022=\n\006report\030\001 \001(\013"
    "2-.mavsdk.rpc.events.HealthAndArmingChec"
    "kReport\"\'\n%GetHealthAndArmingChecksRepor"
    "tRequest\"\237\001\n&GetHealthAndArmingChecksRep"
    "ortResponse\0226\n\revents_result\030\001 \001(\0132\037.mav"
    "sdk.rpc.events.EventsResult\022=\n\006report\030\002 "
    "\001(\0132-.mavsdk.rpc.events.HealthAndArmingC"
    "heckReport*\273\001\n\010LogLevel\022\027\n\023LOG_LEVEL_EME"
    "RGENCY\020\000\022\023\n\017LOG_LEVEL_ALERT\020\001\022\026\n\022LOG_LEV"
    "EL_CRITICAL\020\002\022\023\n\017LOG_LEVEL_ERROR\020\003\022\025\n\021LO"
    "G_LEVEL_WARNING\020\004\022\024\n\020LOG_LEVEL_NOTICE\020\005\022"
    "\022\n\016LOG_LEVEL_INFO\020\006\022\023\n\017LOG_LEVEL_DEBUG\020\007"
    "2\255\003\n\rEventsService\022g\n\017SubscribeEvents\022)."
    "mavsdk.rpc.events.SubscribeEventsRequest"
    "\032!.mavsdk.rpc.events.EventsResponse\"\004\200\265\030"
    "\0000\001\022\224\001\n\036SubscribeHealthAndArmingChecks\0228"
    ".mavsdk.rpc.events.SubscribeHealthAndArm"
    "ingChecksRequest\0320.mavsdk.rpc.events.Hea"
    "lthAndArmingChecksResponse\"\004\200\265\030\0000\001\022\233\001\n\036G"
    "etHealthAndArmingChecksReport\0228.mavsdk.r"
    "pc.events.GetHealthAndArmingChecksReport"
    "Request\0329.mavsdk.rpc.events.GetHealthAnd"
    "ArmingChecksReportResponse\"\004\200\265\030\001B\037\n\020io.m"
    "avsdk.eventsB\013EventsProtob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_events_2fevents_2eproto_deps[1] =
    {
        &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_events_2fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_events_2fevents_2eproto = {
    false,
    false,
    2233,
    descriptor_table_protodef_events_2fevents_2eproto,
    "events/events.proto",
    &descriptor_table_events_2fevents_2eproto_once,
    descriptor_table_events_2fevents_2eproto_deps,
    1,
    12,
    schemas,
    file_default_instances,
    TableStruct_events_2fevents_2eproto::offsets,
    file_level_metadata_events_2fevents_2eproto,
    file_level_enum_descriptors_events_2fevents_2eproto,
    file_level_service_descriptors_events_2fevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_events_2fevents_2eproto_getter() {
  return &descriptor_table_events_2fevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_events_2fevents_2eproto(&descriptor_table_events_2fevents_2eproto);
namespace mavsdk {
namespace rpc {
namespace events {
const ::google::protobuf::EnumDescriptor* EventsResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_events_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fevents_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EventsResult_Result_internal_data_[] = {
    524288u, 0u, };
bool EventsResult_Result_IsValid(int value) {
  return 0 <= value && value <= 7;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EventsResult_Result EventsResult::RESULT_SUCCESS;
constexpr EventsResult_Result EventsResult::RESULT_NOT_AVAILABLE;
constexpr EventsResult_Result EventsResult::RESULT_CONNECTION_ERROR;
constexpr EventsResult_Result EventsResult::RESULT_UNSUPPORTED;
constexpr EventsResult_Result EventsResult::RESULT_DENIED;
constexpr EventsResult_Result EventsResult::RESULT_FAILED;
constexpr EventsResult_Result EventsResult::RESULT_TIMEOUT;
constexpr EventsResult_Result EventsResult::RESULT_NO_SYSTEM;
constexpr EventsResult_Result EventsResult::Result_MIN;
constexpr EventsResult_Result EventsResult::Result_MAX;
constexpr int EventsResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_events_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fevents_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t LogLevel_internal_data_[] = {
    524288u, 0u, };
bool LogLevel_IsValid(int value) {
  return 0 <= value && value <= 7;
}
// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        description_(arena, from.description_),
        event_namespace_(arena, from.event_namespace_),
        event_name_(arena, from.event_name_),
        _cached_size_{0} {}

Event::Event(
    ::google::protobuf::Arena* arena,
    const Event& from)
    : ::google::protobuf::Message(arena) {
  Event* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, compid_),
           offsetof(Impl_, log_level_) -
               offsetof(Impl_, compid_) +
               sizeof(Impl_::log_level_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        description_(arena),
        event_namespace_(arena),
        event_name_(arena),
        _cached_size_{0} {}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compid_),
           0,
           offsetof(Impl_, log_level_) -
               offsetof(Impl_, compid_) +
               sizeof(Impl_::log_level_));
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.Event)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.description_.Destroy();
  _impl_.event_namespace_.Destroy();
  _impl_.event_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.Event)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.event_namespace_.ClearToEmpty();
  _impl_.event_name_.ClearToEmpty();
  ::memset(&_impl_.compid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.log_level_) -
      reinterpret_cast<char*>(&_impl_.compid_)) + sizeof(_impl_.log_level_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 75, 2> Event::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 compid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.compid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.compid_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.message_)}},
    // string description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.description_)}},
    // .mavsdk.rpc.events.LogLevel log_level = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.log_level_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.log_level_)}},
    // string event_namespace = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.event_namespace_)}},
    // string event_name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.event_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 compid = 1;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.compid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 3;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mavsdk.rpc.events.LogLevel log_level = 4;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.log_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string event_namespace = 5;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.event_namespace_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string event_name = 6;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.event_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\0\7\13\0\17\12\0"
    "mavsdk.rpc.events.Event"
    "message"
    "description"
    "event_namespace"
    "event_name"
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 compid = 1;
  if (this->_internal_compid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_compid(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.Event.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.Event.description");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .mavsdk.rpc.events.LogLevel log_level = 4;
  if (this->_internal_log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_log_level(), target);
  }

  // string event_namespace = 5;
  if (!this->_internal_event_namespace().empty()) {
    const std::string& _s = this->_internal_event_namespace();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.Event.event_namespace");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string event_name = 6;
  if (!this->_internal_event_name().empty()) {
    const std::string& _s = this->_internal_event_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.Event.event_name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string event_namespace = 5;
  if (!this->_internal_event_namespace().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_event_namespace());
  }

  // string event_name = 6;
  if (!this->_internal_event_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_event_name());
  }

  // uint32 compid = 1;
  if (this->_internal_compid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_compid());
  }

  // .mavsdk.rpc.events.LogLevel log_level = 4;
  if (this->_internal_log_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Event::_class_data_ = {
    Event::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Event::GetClassData() const {
  return &_class_data_;
}

void Event::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_event_namespace().empty()) {
    _this->_internal_set_event_namespace(from._internal_event_namespace());
  }
  if (!from._internal_event_name().empty()) {
    _this->_internal_set_event_name(from._internal_event_name());
  }
  if (from._internal_compid() != 0) {
    _this->_internal_set_compid(from._internal_compid());
  }
  if (from._internal_log_level() != 0) {
    _this->_internal_set_log_level(from._internal_log_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Event::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Event::InternalSwap(Event* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_namespace_, &other->_impl_.event_namespace_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_name_, &other->_impl_.event_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.log_level_)
      + sizeof(Event::_impl_.log_level_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.compid_)>(
          reinterpret_cast<char*>(&_impl_.compid_),
          reinterpret_cast<char*>(&other->_impl_.compid_));
}

::google::protobuf::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[0]);
}
// ===================================================================

class HealthAndArmingCheckProblem::_Internal {
 public:
};

HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckProblem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        description_(arena, from.description_),
        health_component_(arena, from.health_component_),
        _cached_size_{0} {}

HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(
    ::google::protobuf::Arena* arena,
    const HealthAndArmingCheckProblem& from)
    : ::google::protobuf::Message(arena) {
  HealthAndArmingCheckProblem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.log_level_ = from._impl_.log_level_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckProblem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        description_(arena),
        health_component_(arena),
        _cached_size_{0} {}

inline void HealthAndArmingCheckProblem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.log_level_ = {};
}
HealthAndArmingCheckProblem::~HealthAndArmingCheckProblem() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthAndArmingCheckProblem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.description_.Destroy();
  _impl_.health_component_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthAndArmingCheckProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.health_component_.ClearToEmpty();
  _impl_.log_level_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthAndArmingCheckProblem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 88, 2> HealthAndArmingCheckProblem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HealthAndArmingCheckProblem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string health_component = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.health_component_)}},
    // string message = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.message_)}},
    // string description = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.description_)}},
    // .mavsdk.rpc.events.LogLevel log_level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthAndArmingCheckProblem, _impl_.log_level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.log_level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 2;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mavsdk.rpc.events.LogLevel log_level = 3;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.log_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string health_component = 4;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.health_component_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\55\7\13\0\20\0\0\0"
    "mavsdk.rpc.events.HealthAndArmingCheckProblem"
    "message"
    "description"
    "health_component"
  }},
};

::uint8_t* HealthAndArmingCheckProblem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthAndArmingCheckProblem.message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthAndArmingCheckProblem.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mavsdk.rpc.events.LogLevel log_level = 3;
  if (this->_internal_log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_log_level(), target);
  }

  // string health_component = 4;
  if (!this->_internal_health_component().empty()) {
    const std::string& _s = this->_internal_health_component();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthAndArmingCheckProblem.health_component");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  return target;
}

::size_t HealthAndArmingCheckProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string health_component = 4;
  if (!this->_internal_health_component().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_health_component());
  }

  // .mavsdk.rpc.events.LogLevel log_level = 3;
  if (this->_internal_log_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthAndArmingCheckProblem::_class_data_ = {
    HealthAndArmingCheckProblem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthAndArmingCheckProblem::GetClassData() const {
  return &_class_data_;
}

void HealthAndArmingCheckProblem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckProblem*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckProblem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_health_component().empty()) {
    _this->_internal_set_health_component(from._internal_health_component());
  }
  if (from._internal_log_level() != 0) {
    _this->_internal_set_log_level(from._internal_log_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckProblem::CopyFrom(const HealthAndArmingCheckProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthAndArmingCheckProblem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthAndArmingCheckProblem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthAndArmingCheckProblem::InternalSwap(HealthAndArmingCheckProblem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.health_component_, &other->_impl_.health_component_, arena);
  swap(_impl_.log_level_, other->_impl_.log_level_);
}

::google::protobuf::Metadata HealthAndArmingCheckProblem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[1]);
}
// ===================================================================

class HealthAndArmingCheckMode::_Internal {
 public:
};

HealthAndArmingCheckMode::HealthAndArmingCheckMode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckMode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : problems_{visibility, arena, from.problems_},
        mode_name_(arena, from.mode_name_),
        _cached_size_{0} {}

HealthAndArmingCheckMode::HealthAndArmingCheckMode(
    ::google::protobuf::Arena* arena,
    const HealthAndArmingCheckMode& from)
    : ::google::protobuf::Message(arena) {
  HealthAndArmingCheckMode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.can_arm_or_run_ = from._impl_.can_arm_or_run_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckMode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : problems_{visibility, arena},
        mode_name_(arena),
        _cached_size_{0} {}

inline void HealthAndArmingCheckMode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.can_arm_or_run_ = {};
}
HealthAndArmingCheckMode::~HealthAndArmingCheckMode() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthAndArmingCheckMode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.mode_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthAndArmingCheckMode::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.problems_.Clear();
  _impl_.mode_name_.ClearToEmpty();
  _impl_.can_arm_or_run_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthAndArmingCheckMode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 60, 2> HealthAndArmingCheckMode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HealthAndArmingCheckMode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string mode_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.mode_name_)}},
    // bool can_arm_or_run = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthAndArmingCheckMode, _impl_.can_arm_or_run_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.can_arm_or_run_)}},
    // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.problems_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string mode_name = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.mode_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool can_arm_or_run = 2;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.can_arm_or_run_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.problems_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckProblem>()},
  }}, {{
    "\52\11\0\0\0\0\0\0"
    "mavsdk.rpc.events.HealthAndArmingCheckMode"
    "mode_name"
  }},
};

::uint8_t* HealthAndArmingCheckMode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string mode_name = 1;
  if (!this->_internal_mode_name().empty()) {
    const std::string& _s = this->_internal_mode_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthAndArmingCheckMode.mode_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool can_arm_or_run = 2;
  if (this->_internal_can_arm_or_run() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_can_arm_or_run(), target);
  }

  // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_problems_size()); i < n; i++) {
    const auto& repfield = this->_internal_problems().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckMode)
  return target;
}

::size_t HealthAndArmingCheckMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
  total_size += 1UL * this->_internal_problems_size();
  for (const auto& msg : this->_internal_problems()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string mode_name = 1;
  if (!this->_internal_mode_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mode_name());
  }

  // bool can_arm_or_run = 2;
  if (this->_internal_can_arm_or_run() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthAndArmingCheckMode::_class_data_ = {
    HealthAndArmingCheckMode::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthAndArmingCheckMode::GetClassData() const {
  return &_class_data_;
}

void HealthAndArmingCheckMode::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckMode*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_problems()->MergeFrom(
      from._internal_problems());
  if (!from._internal_mode_name().empty()) {
    _this->_internal_set_mode_name(from._internal_mode_name());
  }
  if (from._internal_can_arm_or_run() != 0) {
    _this->_internal_set_can_arm_or_run(from._internal_can_arm_or_run());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckMode::CopyFrom(const HealthAndArmingCheckMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthAndArmingCheckMode::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthAndArmingCheckMode::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthAndArmingCheckMode::InternalSwap(HealthAndArmingCheckMode* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.problems_.InternalSwap(&other->_impl_.problems_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mode_name_, &other->_impl_.mode_name_, arena);
        swap(_impl_.can_arm_or_run_, other->_impl_.can_arm_or_run_);
}

::google::protobuf::Metadata HealthAndArmingCheckMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[2]);
}
// ===================================================================

class HealthComponentReport::_Internal {
 public:
};

HealthComponentReport::HealthComponentReport(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthComponentReport)
}
inline PROTOBUF_NDEBUG_INLINE HealthComponentReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : name_(arena, from.name_),
        label_(arena, from.label_),
        _cached_size_{0} {}

HealthComponentReport::HealthComponentReport(
    ::google::protobuf::Arena* arena,
    const HealthComponentReport& from)
    : ::google::protobuf::Message(arena) {
  HealthComponentReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_present_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_present_),
           offsetof(Impl_, has_warning_) -
               offsetof(Impl_, is_present_) +
               sizeof(Impl_::has_warning_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthComponentReport)
}
inline PROTOBUF_NDEBUG_INLINE HealthComponentReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        label_(arena),
        _cached_size_{0} {}

inline void HealthComponentReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_present_),
           0,
           offsetof(Impl_, has_warning_) -
               offsetof(Impl_, is_present_) +
               sizeof(Impl_::has_warning_));
}
HealthComponentReport::~HealthComponentReport() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthComponentReport)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthComponentReport::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.label_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthComponentReport::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthComponentReport)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  ::memset(&_impl_.is_present_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.has_warning_) -
      reinterpret_cast<char*>(&_impl_.is_present_)) + sizeof(_impl_.has_warning_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthComponentReport::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 57, 2> HealthComponentReport::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HealthComponentReport_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.name_)}},
    // string label = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.label_)}},
    // bool is_present = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthComponentReport, _impl_.is_present_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.is_present_)}},
    // bool has_error = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthComponentReport, _impl_.has_error_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_error_)}},
    // bool has_warning = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthComponentReport, _impl_.has_warning_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_warning_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string label = 2;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.label_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_present = 3;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.is_present_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_error = 4;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_error_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_warning = 5;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_warning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\47\4\5\0\0\0\0\0"
    "mavsdk.rpc.events.HealthComponentReport"
    "name"
    "label"
  }},
};

::uint8_t* HealthComponentReport::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthComponentReport)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthComponentReport.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthComponentReport.label");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool is_present = 3;
  if (this->_internal_is_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_present(), target);
  }

  // bool has_error = 4;
  if (this->_internal_has_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_has_error(), target);
  }

  // bool has_warning = 5;
  if (this->_internal_has_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_has_warning(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthComponentReport)
  return target;
}

::size_t HealthComponentReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthComponentReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // bool is_present = 3;
  if (this->_internal_is_present() != 0) {
    total_size += 2;
  }

  // bool has_error = 4;
  if (this->_internal_has_error() != 0) {
    total_size += 2;
  }

  // bool has_warning = 5;
  if (this->_internal_has_warning() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthComponentReport::_class_data_ = {
    HealthComponentReport::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthComponentReport::GetClassData() const {
  return &_class_data_;
}

void HealthComponentReport::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthComponentReport*>(&to_msg);
  auto& from = static_cast<const HealthComponentReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthComponentReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_is_present() != 0) {
    _this->_internal_set_is_present(from._internal_is_present());
  }
  if (from._internal_has_error() != 0) {
    _this->_internal_set_has_error(from._internal_has_error());
  }
  if (from._internal_has_warning() != 0) {
    _this->_internal_set_has_warning(from._internal_has_warning());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthComponentReport::CopyFrom(const HealthComponentReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthComponentReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthComponentReport::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthComponentReport::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthComponentReport::InternalSwap(HealthComponentReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_warning_)
      + sizeof(HealthComponentReport::_impl_.has_warning_)
      - PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.is_present_)>(
          reinterpret_cast<char*>(&_impl_.is_present_),
          reinterpret_cast<char*>(&other->_impl_.is_present_));
}

::google::protobuf::Metadata HealthComponentReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[3]);
}
// ===================================================================

class HealthAndArmingCheckReport::_Internal {
 public:
  using HasBits = decltype(std::declval<HealthAndArmingCheckReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_._has_bits_);
  static const ::mavsdk::rpc::events::HealthAndArmingCheckMode& current_mode_intention(const HealthAndArmingCheckReport* msg);
  static void set_has_current_mode_intention(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::events::HealthAndArmingCheckMode& HealthAndArmingCheckReport::_Internal::current_mode_intention(const HealthAndArmingCheckReport* msg) {
  return *msg->_impl_.current_mode_intention_;
}
HealthAndArmingCheckReport::HealthAndArmingCheckReport(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        health_components_{visibility, arena, from.health_components_},
        all_problems_{visibility, arena, from.all_problems_} {}

HealthAndArmingCheckReport::HealthAndArmingCheckReport(
    ::google::protobuf::Arena* arena,
    const HealthAndArmingCheckReport& from)
    : ::google::protobuf::Message(arena) {
  HealthAndArmingCheckReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_mode_intention_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::events::HealthAndArmingCheckMode>(arena, *from._impl_.current_mode_intention_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        health_components_{visibility, arena},
        all_problems_{visibility, arena} {}

inline void HealthAndArmingCheckReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.current_mode_intention_ = {};
}
HealthAndArmingCheckReport::~HealthAndArmingCheckReport() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthAndArmingCheckReport::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.current_mode_intention_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthAndArmingCheckReport::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.health_components_.Clear();
  _impl_.all_problems_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.current_mode_intention_ != nullptr);
    _impl_.current_mode_intention_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthAndArmingCheckReport::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> HealthAndArmingCheckReport::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HealthAndArmingCheckReport_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.current_mode_intention_)}},
    // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.health_components_)}},
    // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.all_problems_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.current_mode_intention_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.health_components_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.all_problems_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckMode>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthComponentReport>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckProblem>()},
  }}, {{
  }},
};

::uint8_t* HealthAndArmingCheckReport::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::current_mode_intention(this),
        _Internal::current_mode_intention(this).GetCachedSize(), target, stream);
  }

  // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_health_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_health_components().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_problems_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_problems().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckReport)
  return target;
}

::size_t HealthAndArmingCheckReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
  total_size += 1UL * this->_internal_health_components_size();
  for (const auto& msg : this->_internal_health_components()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
  total_size += 1UL * this->_internal_all_problems_size();
  for (const auto& msg : this->_internal_all_problems()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_mode_intention_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthAndArmingCheckReport::_class_data_ = {
    HealthAndArmingCheckReport::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthAndArmingCheckReport::GetClassData() const {
  return &_class_data_;
}

void HealthAndArmingCheckReport::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckReport*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_health_components()->MergeFrom(
      from._internal_health_components());
  _this->_internal_mutable_all_problems()->MergeFrom(
      from._internal_all_problems());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_current_mode_intention()->::mavsdk::rpc::events::HealthAndArmingCheckMode::MergeFrom(
        from._internal_current_mode_intention());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckReport::CopyFrom(const HealthAndArmingCheckReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthAndArmingCheckReport::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthAndArmingCheckReport::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthAndArmingCheckReport::InternalSwap(HealthAndArmingCheckReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.health_components_.InternalSwap(&other->_impl_.health_components_);
  _impl_.all_problems_.InternalSwap(&other->_impl_.all_problems_);
  swap(_impl_.current_mode_intention_, other->_impl_.current_mode_intention_);
}

::google::protobuf::Metadata HealthAndArmingCheckReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[4]);
}
// ===================================================================

class EventsResult::_Internal {
 public:
};

EventsResult::EventsResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.EventsResult)
}
inline PROTOBUF_NDEBUG_INLINE EventsResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : result_str_(arena, from.result_str_),
        _cached_size_{0} {}

EventsResult::EventsResult(
    ::google::protobuf::Arena* arena,
    const EventsResult& from)
    : ::google::protobuf::Message(arena) {
  EventsResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.EventsResult)
}
inline PROTOBUF_NDEBUG_INLINE EventsResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : result_str_(arena),
        _cached_size_{0} {}

inline void EventsResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
EventsResult::~EventsResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.EventsResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EventsResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.result_str_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EventsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.EventsResult)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EventsResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 2> EventsResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EventsResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string result_str = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EventsResult, _impl_.result_str_)}},
    // .mavsdk.rpc.events.EventsResult.Result result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EventsResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(EventsResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.EventsResult.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(EventsResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string result_str = 2;
    {PROTOBUF_FIELD_OFFSET(EventsResult, _impl_.result_str_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\0\12\0\0\0\0\0"
    "mavsdk.rpc.events.EventsResult"
    "result_str"
  }},
};

::uint8_t* EventsResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.EventsResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.events.EventsResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    const std::string& _s = this->_internal_result_str();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.EventsResult.result_str");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.EventsResult)
  return target;
}

::size_t EventsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.EventsResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_result_str());
  }

  // .mavsdk.rpc.events.EventsResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EventsResult::_class_data_ = {
    EventsResult::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EventsResult::GetClassData() const {
  return &_class_data_;
}

void EventsResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EventsResult*>(&to_msg);
  auto& from = static_cast<const EventsResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.EventsResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResult::CopyFrom(const EventsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.EventsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EventsResult::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EventsResult::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EventsResult::InternalSwap(EventsResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, &other->_impl_.result_str_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata EventsResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[5]);
}
// ===================================================================

class SubscribeEventsRequest::_Internal {
 public:
};

SubscribeEventsRequest::SubscribeEventsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.SubscribeEventsRequest)
}
SubscribeEventsRequest::SubscribeEventsRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeEventsRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeEventsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.SubscribeEventsRequest)
}









::google::protobuf::Metadata SubscribeEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[6]);
}
// ===================================================================

class EventsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EventsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::events::Event& event(const EventsResponse* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::events::Event& EventsResponse::_Internal::event(const EventsResponse* msg) {
  return *msg->_impl_.event_;
}
EventsResponse::EventsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.EventsResponse)
}
inline PROTOBUF_NDEBUG_INLINE EventsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EventsResponse::EventsResponse(
    ::google::protobuf::Arena* arena,
    const EventsResponse& from)
    : ::google::protobuf::Message(arena) {
  EventsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.event_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::events::Event>(arena, *from._impl_.event_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.EventsResponse)
}
inline PROTOBUF_NDEBUG_INLINE EventsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EventsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.event_ = {};
}
EventsResponse::~EventsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.EventsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EventsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.event_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.EventsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EventsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EventsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EventsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.events.Event event = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_.event_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.Event event = 1;
    {PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_.event_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::Event>()},
  }}, {{
  }},
};

::uint8_t* EventsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.EventsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.events.Event event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.EventsResponse)
  return target;
}

::size_t EventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.EventsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.events.Event event = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EventsResponse::_class_data_ = {
    EventsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EventsResponse::GetClassData() const {
  return &_class_data_;
}

void EventsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EventsResponse*>(&to_msg);
  auto& from = static_cast<const EventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.EventsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_event()->::mavsdk::rpc::events::Event::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResponse::CopyFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.EventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EventsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EventsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EventsResponse::InternalSwap(EventsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.event_, other->_impl_.event_);
}

::google::protobuf::Metadata EventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[7]);
}
// ===================================================================

class SubscribeHealthAndArmingChecksRequest::_Internal {
 public:
};

SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest)
}
SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeHealthAndArmingChecksRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeHealthAndArmingChecksRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest)
}









::google::protobuf::Metadata SubscribeHealthAndArmingChecksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[8]);
}
// ===================================================================

class HealthAndArmingChecksResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<HealthAndArmingChecksResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::events::HealthAndArmingCheckReport& report(const HealthAndArmingChecksResponse* msg);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::events::HealthAndArmingCheckReport& HealthAndArmingChecksResponse::_Internal::report(const HealthAndArmingChecksResponse* msg) {
  return *msg->_impl_.report_;
}
HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingChecksResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(
    ::google::protobuf::Arena* arena,
    const HealthAndArmingChecksResponse& from)
    : ::google::protobuf::Message(arena) {
  HealthAndArmingChecksResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.report_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::events::HealthAndArmingCheckReport>(arena, *from._impl_.report_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingChecksResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HealthAndArmingChecksResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.report_ = {};
}
HealthAndArmingChecksResponse::~HealthAndArmingChecksResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthAndArmingChecksResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.report_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthAndArmingChecksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.report_ != nullptr);
    _impl_.report_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthAndArmingChecksResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> HealthAndArmingChecksResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HealthAndArmingChecksResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_.report_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_.report_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckReport>()},
  }}, {{
  }},
};

::uint8_t* HealthAndArmingChecksResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::report(this),
        _Internal::report(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  return target;
}

::size_t HealthAndArmingChecksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.report_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthAndArmingChecksResponse::_class_data_ = {
    HealthAndArmingChecksResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthAndArmingChecksResponse::GetClassData() const {
  return &_class_data_;
}

void HealthAndArmingChecksResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthAndArmingChecksResponse*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingChecksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_report()->::mavsdk::rpc::events::HealthAndArmingCheckReport::MergeFrom(
        from._internal_report());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingChecksResponse::CopyFrom(const HealthAndArmingChecksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthAndArmingChecksResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthAndArmingChecksResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthAndArmingChecksResponse::InternalSwap(HealthAndArmingChecksResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.report_, other->_impl_.report_);
}

::google::protobuf::Metadata HealthAndArmingChecksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[9]);
}
// ===================================================================

class GetHealthAndArmingChecksReportRequest::_Internal {
 public:
};

GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest)
}
GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(
    ::google::protobuf::Arena* arena,
    const GetHealthAndArmingChecksReportRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetHealthAndArmingChecksReportRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest)
}









::google::protobuf::Metadata GetHealthAndArmingChecksReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[10]);
}
// ===================================================================

class GetHealthAndArmingChecksReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHealthAndArmingChecksReportResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::events::EventsResult& events_result(const GetHealthAndArmingChecksReportResponse* msg);
  static void set_has_events_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mavsdk::rpc::events::HealthAndArmingCheckReport& report(const GetHealthAndArmingChecksReportResponse* msg);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mavsdk::rpc::events::EventsResult& GetHealthAndArmingChecksReportResponse::_Internal::events_result(const GetHealthAndArmingChecksReportResponse* msg) {
  return *msg->_impl_.events_result_;
}
const ::mavsdk::rpc::events::HealthAndArmingCheckReport& GetHealthAndArmingChecksReportResponse::_Internal::report(const GetHealthAndArmingChecksReportResponse* msg) {
  return *msg->_impl_.report_;
}
GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHealthAndArmingChecksReportResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(
    ::google::protobuf::Arena* arena,
    const GetHealthAndArmingChecksReportResponse& from)
    : ::google::protobuf::Message(arena) {
  GetHealthAndArmingChecksReportResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.events_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::events::EventsResult>(arena, *from._impl_.events_result_)
                : nullptr;
  _impl_.report_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mavsdk::rpc::events::HealthAndArmingCheckReport>(arena, *from._impl_.report_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHealthAndArmingChecksReportResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetHealthAndArmingChecksReportResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, events_result_),
           0,
           offsetof(Impl_, report_) -
               offsetof(Impl_, events_result_) +
               sizeof(Impl_::report_));
}
GetHealthAndArmingChecksReportResponse::~GetHealthAndArmingChecksReportResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetHealthAndArmingChecksReportResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.events_result_;
  delete _impl_.report_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetHealthAndArmingChecksReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.events_result_ != nullptr);
      _impl_.events_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.report_ != nullptr);
      _impl_.report_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetHealthAndArmingChecksReportResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetHealthAndArmingChecksReportResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetHealthAndArmingChecksReportResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.report_)}},
    // .mavsdk.rpc.events.EventsResult events_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.events_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.EventsResult events_result = 1;
    {PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.events_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
    {PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.report_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::EventsResult>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckReport>()},
  }}, {{
  }},
};

::uint8_t* GetHealthAndArmingChecksReportResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.events.EventsResult events_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::events_result(this),
        _Internal::events_result(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::report(this),
        _Internal::report(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  return target;
}

::size_t GetHealthAndArmingChecksReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .mavsdk.rpc.events.EventsResult events_result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.events_result_);
    }

    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.report_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetHealthAndArmingChecksReportResponse::_class_data_ = {
    GetHealthAndArmingChecksReportResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetHealthAndArmingChecksReportResponse::GetClassData() const {
  return &_class_data_;
}

void GetHealthAndArmingChecksReportResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetHealthAndArmingChecksReportResponse*>(&to_msg);
  auto& from = static_cast<const GetHealthAndArmingChecksReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_events_result()->::mavsdk::rpc::events::EventsResult::MergeFrom(
          from._internal_events_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_report()->::mavsdk::rpc::events::HealthAndArmingCheckReport::MergeFrom(
          from._internal_report());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHealthAndArmingChecksReportResponse::CopyFrom(const GetHealthAndArmingChecksReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetHealthAndArmingChecksReportResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetHealthAndArmingChecksReportResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetHealthAndArmingChecksReportResponse::InternalSwap(GetHealthAndArmingChecksReportResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.report_)
      + sizeof(GetHealthAndArmingChecksReportResponse::_impl_.report_)
      - PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.events_result_)>(
          reinterpret_cast<char*>(&_impl_.events_result_),
          reinterpret_cast<char*>(&other->_impl_.events_result_));
}

::google::protobuf::Metadata GetHealthAndArmingChecksReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2fevents_2eproto_getter, &descriptor_table_events_2fevents_2eproto_once,
      file_level_metadata_events_2fevents_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace events
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
